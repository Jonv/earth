response.headers['Content-Type'] = 'image/svg+xml'

xml.instruct!

xml.declare!(:DOCTYPE, :svg, 
             :PUBLIC, "-//W3C//DTD SVG 1.1//EN", 
             "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd")

xml.instruct!("xml-stylesheet".to_sym, 
              :type => "text/css",
              :href => "/svg.css")

xml.svg(:width => "100%", 
        :height => "100%", 
        :version => "1.1", 
        :viewBox => "-100,-100,200,200", 
        :preserveAspectRatio => "xMidYMid meet",
        :xmlns => "http://www.w3.org/2000/svg", 
        "xmlns:xlink".to_sym => "http://www.w3.org/1999/xlink") do 

  server_circles, max_radius = create_server_circles
  xml.g(:transform => "scale(#{90 / max_radius})") do
    server_circles.each do |server_circle|
      xml.a("xlink:href".to_sym => url_for(:controller => "graph", 
                                           :escape => false,
                                           :params => { :server => server_circle.server.name }), :target => "_parent") do
        xml.circle(:cx => server_circle.x, :cy => server_circle.y, :r => server_circle.radius, :class => "server")
        
        xml.text("#{server_circle.server.name}", 
                 :x => server_circle.x, 
                 :y => (server_circle.y - 3),
                 :class => "server-name")  
        
        xml.text("#{human_size_in(human_units_of(server_circle.server.size), server_circle.server.size)} #{human_units_of(server_circle.server.size)}",
                 :x => server_circle.x, 
                 :y => (server_circle.y + 3),
                 :class => "server-size")
      end
    end
  end
end
